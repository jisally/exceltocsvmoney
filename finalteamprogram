#소창팀플_완성본
#코드가 너무긴데 줄일수있는방법없나..
은행에서excel파일 다운받고 주소 쓰면 월별,기간별 사용금액 합계출력, 하루평균 사용금액 출력, 그래프 출력, 미래 사용예측 출력, 원하는 금액대 출력(최소&최대금액 입력시)
#메뉴를 추가하여 원하는 부분으로 갈수 있도록 만들려고 하였으나 에러가 뜸->튜플 어쩌고 뭐가 안된다고 함
#2,4번을 반영하여 수정할 수 있는 방법이 없나..
#가계부 프로그램인데 차별성을 두기위해 그래프와 원하는 금액대 출력 아이디어 생각함 그런데 더 좋은 아이디어는 없나,,


#1학년 1학기


import openpyxl
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import numpy as np
import csv



x=input('파일의 주소를 입력하세요: ')


df= pd.read_excel(x,skiprows=10)

division=df['구분']


division_1=df[df['구분']=='출금']


df=division_1

value = []

#2021.01.01~09 일은 jan_week1_money.txt에 저장

df_3=df[df['거래일시'].str.contains('2021.01.0', na=False)]

df_4=df_3[['거래금액']]

df_4.to_csv("jan_week1_money.txt", index=False)


#-와 , " 제거
def replaceInFile(file_path, oldstr, newstr):
    fr=open(file_path, 'r')
    lines=fr.readlines()
    fr.close()

    fw=open(file_path, 'w')
    for line in lines:
        fw.write(line.replace(oldstr, newstr))
    fw.close()

replaceInFile("jan_week1_money.txt", ",", "")
replaceInFile("jan_week1_money.txt", "-", "")
replaceInFile("jan_week1_money.txt", '"', '')


#'거래금액' 용어 제거
with open("jan_week1_money.txt", "r")as fin:
    data=fin.read().splitlines(True)
with open("jan_week1_money.txt", "w")as fout:
    fout.writelines(data[1:])

#==========================================================
#2021.01.10~19일은 jan_week2_money.txt에 저장
df_3=df[df['거래일시'].str.contains('2021.01.1', na=False)]

df_4=df_3[['거래금액']]

df_4.to_csv("jan_week2_money.txt", index=False)


#-와 , " 제거

replaceInFile("jan_week2_money.txt", ",", "")
replaceInFile("jan_week2_money.txt", "-", "")
replaceInFile("jan_week2_money.txt", '"', '')


#'거래금액' 용어 제거
with open("jan_week2_money.txt", "r")as fin:
    data=fin.read().splitlines(True)
with open("jan_week2_money.txt", "w")as fout:
    fout.writelines(data[1:])

#==========================================================
#2021.01.20~31일은 jan_week3_money.txt에 저장
df_3_1=df[df['거래일시'].str.contains('2021.01.2', na=False)]
df_3_2=df[df['거래일시'].str.contains('2021.01.3', na=False)]

df_3=pd.concat([df_3_1,df_3_2])

df_4=df_3[['거래금액']]

df_4.to_csv("jan_week3_money.txt", index=False)


#-와 , " 제거

replaceInFile("jan_week3_money.txt", ",", "")
replaceInFile("jan_week3_money.txt", "-", "")
replaceInFile("jan_week3_money.txt", '"', '')


#'거래금액' 용어 제거
with open("jan_week3_money.txt", "r")as fin:
    data=fin.read().splitlines(True)
with open("jan_week3_money.txt", "w")as fout:
    fout.writelines(data[1:])

#==========================================================
#2021.01월은 jan_money.txt에 저장
df_3=df[df['거래일시'].str.contains('2021.01', na=False)]

df_4=df_3[['거래금액']]

df_4.to_csv("jan_money.txt", index=False)


#-와 , " 제거

replaceInFile("jan_money.txt", ",", "")
replaceInFile("jan_money.txt", "-", "")
replaceInFile("jan_money.txt", '"', '')


#'거래금액' 용어 제거
with open("jan_money.txt", "r")as fin:
    data=fin.read().splitlines(True)
with open("jan_money.txt", "w")as fout:
    fout.writelines(data[1:])

#===============================================================
df_5=df[df['거래일시'].str.contains('2021.02.0', na=False)]

df_6=df_5[['거래금액']]

df_6.to_csv("feb_week1_money.txt", index=False)


#-와 , " 제거


replaceInFile("feb_week1_money.txt", ",", "")
replaceInFile("feb_week1_money.txt", "-", "")
replaceInFile("feb_week1_money.txt", '"', '')


#'거래금액' 용어 제거
with open("feb_week1_money.txt", "r")as fin:
    data=fin.read().splitlines(True)
with open("feb_week1_money.txt", "w")as fout:
    fout.writelines(data[1:])
#===============================================================
df_5=df[df['거래일시'].str.contains('2021.02.1', na=False)]

df_6=df_5[['거래금액']]

df_6.to_csv("feb_week2_money.txt", index=False)


#-와 , " 제거


replaceInFile("feb_week2_money.txt", ",", "")
replaceInFile("feb_week2_money.txt", "-", "")
replaceInFile("feb_week2_money.txt", '"', '')


#'거래금액' 용어 제거
with open("feb_week2_money.txt", "r")as fin:
    data=fin.read().splitlines(True)
with open("feb_week2_money.txt", "w")as fout:
    fout.writelines(data[1:])
#===============================================================
df_5=df[df['거래일시'].str.contains('2021.02.2', na=False)]

df_6=df_5[['거래금액']]

df_6.to_csv("feb_week3_money.txt", index=False)


#-와 , " 제거


replaceInFile("feb_week3_money.txt", ",", "")
replaceInFile("feb_week3_money.txt", "-", "")
replaceInFile("feb_week3_money.txt", '"', '')


#'거래금액' 용어 제거
with open("feb_week3_money.txt", "r")as fin:
    data=fin.read().splitlines(True)
with open("feb_week3_money.txt", "w")as fout:
    fout.writelines(data[1:])
#===============================================================
df_5=df[df['거래일시'].str.contains('2021.02', na=False)]

df_6=df_5[['거래금액']]

df_6.to_csv("feb_money.txt", index=False)


#-와 , " 제거


replaceInFile("feb_money.txt", ",", "")
replaceInFile("feb_money.txt", "-", "")
replaceInFile("feb_money.txt", '"', '')


#'거래금액' 용어 제거
with open("feb_money.txt", "r")as fin:
    data=fin.read().splitlines(True)
with open("feb_money.txt", "w")as fout:
    fout.writelines(data[1:])

#===============================================================
df_7=df[df['거래일시'].str.contains('2021.03.0', na=False)]

df_8=df_7[['거래금액']]

df_8.to_csv("mar_week1_money.txt", index=False)


#-와 , " 제거


replaceInFile("mar_week1_money.txt", ",", "")
replaceInFile("mar_week1_money.txt", "-", "")
replaceInFile("mar_week1_money.txt", '"', '')


#'거래금액' 용어 제거
with open("mar_week1_money.txt", "r")as fin:
    data=fin.read().splitlines(True)
with open("mar_week1_money.txt", "w")as fout:
    fout.writelines(data[1:])
#===============================================================
df_7=df[df['거래일시'].str.contains('2021.03.1', na=False)]

df_8=df_7[['거래금액']]

df_8.to_csv("mar_week2_money.txt", index=False)


#-와 , " 제거


replaceInFile("mar_week2_money.txt", ",", "")
replaceInFile("mar_week2_money.txt", "-", "")
replaceInFile("mar_week2_money.txt", '"', '')


#'거래금액' 용어 제거
with open("mar_week2_money.txt", "r")as fin:
    data=fin.read().splitlines(True)
with open("mar_week2_money.txt", "w")as fout:
    fout.writelines(data[1:])

#===============================================================
df_7_1=df[df['거래일시'].str.contains('2021.03.2', na=False)]
df_7_2=df[df['거래일시'].str.contains('2021.03.3', na=False)]
df_7=pd.concat([df_7_1,df_7_2])


df_8=df_7[['거래금액']]

df_8.to_csv("mar_week3_money.txt", index=False)


#-와 , " 제거


replaceInFile("mar_week3_money.txt", ",", "")
replaceInFile("mar_week3_money.txt", "-", "")
replaceInFile("mar_week3_money.txt", '"', '')


#'거래금액' 용어 제거
with open("mar_week3_money.txt", "r")as fin:
    data=fin.read().splitlines(True)
with open("mar_week3_money.txt", "w")as fout:
    fout.writelines(data[1:])






#===============================================================
df_7=df[df['거래일시'].str.contains('2021.03', na=False)]

df_8=df_7[['거래금액']]

df_8.to_csv("mar_money.txt", index=False)


#-와 , " 제거


replaceInFile("mar_money.txt", ",", "")
replaceInFile("mar_money.txt", "-", "")
replaceInFile("mar_money.txt", '"', '')


#'거래금액' 용어 제거
with open("mar_money.txt", "r")as fin:
    data=fin.read().splitlines(True)
with open("mar_money.txt", "w")as fout:
    fout.writelines(data[1:])




#===============================================================  
df_9=df[df['거래일시'].str.contains('2021.04.0', na=False)]

df_10=df_9[['거래금액']]

df_10.to_csv("apr_week1_money.txt", index=False)


#-와 , " 제거



replaceInFile("apr_week1_money.txt", ",", "")
replaceInFile("apr_week1_money.txt", "-", "")
replaceInFile("apr_week1_money.txt", '"', '')


#'거래금액' 용어 제거
with open("apr_week1_money.txt", "r")as fin:
    data=fin.read().splitlines(True)
with open("apr_week1_money.txt", "w")as fout:
    fout.writelines(data[1:])

#===============================================================  
df_9=df[df['거래일시'].str.contains('2021.04.1', na=False)]

df_10=df_9[['거래금액']]

df_10.to_csv("apr_week2_money.txt", index=False)


#-와 , " 제거



replaceInFile("apr_week2_money.txt", ",", "")
replaceInFile("apr_week2_money.txt", "-", "")
replaceInFile("apr_week2_money.txt", '"', '')


#'거래금액' 용어 제거
with open("apr_week2_money.txt", "r")as fin:
    data=fin.read().splitlines(True)
with open("apr_week2_money.txt", "w")as fout:
    fout.writelines(data[1:])
#===============================================================  
df_9_1=df[df['거래일시'].str.contains('2021.04.2', na=False)]
df_9_2=df[df['거래일시'].str.contains('2021.04.2', na=False)]

df_9=pd.concat([df_9_1,df_9_2])

df_10=df_9[['거래금액']]

df_10.to_csv("apr_week3_money.txt", index=False)


#-와 , " 제거



replaceInFile("apr_week3_money.txt", ",", "")
replaceInFile("apr_week3_money.txt", "-", "")
replaceInFile("apr_week3_money.txt", '"', '')


#'거래금액' 용어 제거
with open("apr_week3_money.txt", "r")as fin:
    data=fin.read().splitlines(True)
with open("apr_week3_money.txt", "w")as fout:
    fout.writelines(data[1:])
#===============================================================  
df_9=df[df['거래일시'].str.contains('2021.04', na=False)]

df_10=df_9[['거래금액']]

df_10.to_csv("apr_money.txt", index=False)


#-와 , " 제거



replaceInFile("apr_money.txt", ",", "")
replaceInFile("apr_money.txt", "-", "")
replaceInFile("apr_money.txt", '"', '')


#'거래금액' 용어 제거
with open("apr_money.txt", "r")as fin:
    data=fin.read().splitlines(True)
with open("apr_money.txt", "w")as fout:
    fout.writelines(data[1:])
#===============================================================
df_11=df[df['거래일시'].str.contains('2021.05.0', na=False)]

df_12=df_11[['거래금액']]

df_12.to_csv("may_week1_money.txt", index=False)


#-와 , " 제거



replaceInFile("may_week1_money.txt", ",", "")
replaceInFile("may_week1_money.txt", "-", "")
replaceInFile("may_week1_money.txt", '"', '')


#'거래금액' 용어 제거
with open("may_week1_money.txt", "r")as fin:
    data=fin.read().splitlines(True)
with open("may_week1_money.txt", "w")as fout:
    fout.writelines(data[1:])
#===============================================================
df_11=df[df['거래일시'].str.contains('2021.05.1', na=False)]

df_12=df_11[['거래금액']]

df_12.to_csv("may_week2_money.txt", index=False)


#-와 , " 제거



replaceInFile("may_week2_money.txt", ",", "")
replaceInFile("may_week2_money.txt", "-", "")
replaceInFile("may_week2_money.txt", '"', '')


#'거래금액' 용어 제거
with open("may_week2_money.txt", "r")as fin:
    data=fin.read().splitlines(True)
with open("may_week2_money.txt", "w")as fout:
    fout.writelines(data[1:])
#===============================================================
df_11_1=df[df['거래일시'].str.contains('2021.05.2', na=False)]
df_11_2=df[df['거래일시'].str.contains('2021.05.3', na=False)]

df_11=pd.concat([df_11_1,df_11_2])


df_12=df_11[['거래금액']]

df_12.to_csv("may_week3_money.txt", index=False)


#-와 , " 제거



replaceInFile("may_week3_money.txt", ",", "")
replaceInFile("may_week3_money.txt", "-", "")
replaceInFile("may_week3_money.txt", '"', '')


#'거래금액' 용어 제거
with open("may_week3_money.txt", "r")as fin:
    data=fin.read().splitlines(True)
with open("may_week3_money.txt", "w")as fout:
    fout.writelines(data[1:])

#===============================================================
df_11=df[df['거래일시'].str.contains('2021.05', na=False)]

df_12=df_11[['거래금액']]

df_12.to_csv("may_money.txt", index=False)


#-와 , " 제거



replaceInFile("may_money.txt", ",", "")
replaceInFile("may_money.txt", "-", "")
replaceInFile("may_money.txt", '"', '')


#'거래금액' 용어 제거
with open("may_money.txt", "r")as fin:
    data=fin.read().splitlines(True)
with open("may_money.txt", "w")as fout:
    fout.writelines(data[1:])

#=========================규빈=================================
import math



#1월10일당 합

jwa=0

with open("jan_week1_money.txt",'r') as f:
    while True:
        line=f.readline()
        if not line:
            break
        jwa+= int(line)


print("1/1~9 거래 금액 :", jwa, "원")

f.close()



jwb=0


with open("jan_week2_money.txt",'r') as f:
    while True:
        line=f.readline()
        if not line:
            break
        jwb+= int(line)

print("1/10~19 거래 금액 :", jwb, "원")

f.close()



jwc=0
with open("jan_week3_money.txt",'r') as f:
    while True:
        line=f.readline()
        if not line:
            break
        jwc+= int(line)

print("1/20~31 거래 금액 :", jwc, "원")

f.close()


#----------------------------------------

#2월10일당 합

fwa=0
with open("feb_week1_money.txt",'r') as f:
    while True:
        line=f.readline()
        if not line:
            break
        fwa+= int(line)

print("2/1~9 거래 금액 :", fwa, "원")

f.close()



fwb=0
with open("feb_week2_money.txt",'r') as f:
    while True:
        line=f.readline()
        if not line:
            break
        fwb+= int(line)

print("2/10~19 거래 금액 :", fwb, "원")

f.close()



fwc=0
with open("feb_week3_money.txt",'r') as f:
    while True:
        line=f.readline()
        if not line:
            break
        fwc+= int(line)

print("2/20~28 거래 금액 :", fwc, "원")

f.close()

#---------------------------------------------


#3월10일당 합

mwa=0
with open("mar_week1_money.txt",'r') as f:
    while True:
        line=f.readline()
        if not line:
            break
        mwa+= int(line)

print("3/1~9 거래 금액 :", mwa, "원")

f.close()



mwb=0
with open("mar_week2_money.txt",'r') as f:
    while True:
        line=f.readline()
        if not line:
            break
        mwb+= int(line)

print("3/10~19 거래 금액 :", mwb, "원")

f.close()



mwc=0
with open("mar_week3_money.txt",'r') as f:
    while True:
        line=f.readline()
        if not line:
            break
        mwc+= int(line)

print("3/20~31 거래 금액 :", mwc, "원")

f.close()



#------------------------------------------------------------------
#4월 10일 합계

awa=0
with open("apr_week1_money.txt",'r') as f:
    while True:
        line=f.readline()
        if not line:
            break
        awa+= int(line)

print("4/1~9 거래 금액 :", awa, "원")

f.close()



awb=0
with open("apr_week2_money.txt",'r') as f:
    while True:
        line=f.readline()
        if not line:
            break
        awb+= int(line)

print("4/10~19 거래 금액 :", awb, "원")

f.close()



awc=0
with open("apr_week3_money.txt",'r') as f:
    while True:
        line=f.readline()
        if not line:
            break
        awc+= int(line)

print("4/20~30 거래 금액 :", awc, "원")

f.close()


#--------------------------------------------------------
#5월 10일당 합계


mmwa=0
with open("may_week1_money.txt",'r') as f:
    while True:
        line=f.readline()
        if not line:
            break
        mmwa+= int(line)
print("5/1~9 거래 금액 :", mmwa, "원")

f.close()



mmwb=0
with open("may_week2_money.txt",'r') as f:
    while True:
        line=f.readline()
        if not line:
            break
        mmwb+= int(line)

print("5/10~19 거래 금액 :", mmwb, "원")

f.close()



mmwc=0
with open("may_week3_money.txt",'r') as f:
    while True:
        line=f.readline()
        if not line:
            break
        mmwc+= int(line)

print("5/20~31 거래 금액 :", mmwc, "원")

f.close()


#---------------------------------------------------------------------
#달별 합계

#1월

jan=0
with open("jan_money.txt",'r') as f:
    while True:
        line=f.readline()
        if not line:
            break
        jan+= int(line)

print("1월거래 금액 :", jan, "원")

value.append(jan)

f.close()


#2월


feb=0
with open("feb_money.txt",'r') as f:
    while True:
        line=f.readline()
        if not line:
            break
        feb+= int(line)

print("2월거래 금액 :", feb, "원")

value.append(feb)

f.close()

#3월

mar=0
with open("mar_money.txt",'r') as f:
    while True:
        line=f.readline()
        if not line:
            break
        mar+= int(line)

print("3월거래 금액 :", mar, "원")

value.append(mar)

f.close()

#4월

apr=0
with open("apr_money.txt",'r') as f:
    while True:
        line=f.readline()
        if not line:
            break
        apr+= int(line)

print("4월거래 금액 :", apr, "원")

value.append(apr)

f.close()


#5월

may=0
with open("may_money.txt",'r') as f:
    while True:
        line=f.readline()
        if not line:
            break
        may+= int(line)

print("5월거래 금액 :", may, "원")

value.append(may)

f.close()


#---------------------------

#월별 평균

#1월 평균

f= open('jan_money.txt','r')
lines = f.read().splitlines() 
data = []
sum=0

for line in lines:
    data.append(line)

for i in range(0,len(data)):
    sum += int(data[i])

javg =int(sum/len(data))

print('1월 하루평균 소비:',javg,'원')

#2월 평균

f= open('feb_money.txt','r')
lines = f.read().splitlines() 
data = []
sum=0

for line in lines:
    data.append(line)

for i in range(0,len(data)):
    sum += int(data[i])

favg = int(sum/len(data))

print('2월 하루평균 소비:',favg,'원')

#3월 평균

f= open('mar_money.txt','r')
lines = f.read().splitlines() 
data = []
sum=0

for line in lines:
    data.append(line)

for i in range(0,len(data)):
    sum += int(data[i])

mavg = int(sum/len(data))

print('3월 하루평균 소비:',mavg,'원')

#4월 평균

f= open('apr_money.txt','r')
lines = f.read().splitlines() 
data = []
sum=0

for line in lines:
    data.append(line)

for i in range(0,len(data)):
    sum += int(data[i])

aavg =int(sum/len(data))

print('4월 하루평균 소비:',aavg,'원')

#5월 평균

f= open('may_money.txt','r')
lines = f.read().splitlines() 
data = []

sum=0

for line in lines:
    data.append(line)

for i in range(0,len(data)):
    sum += int(data[i])

maavg =int(sum/len(data))

print('5월 하루평균 소비:',maavg,'원')

from time import sleep

sleep(5)

# 라이브러리 불러오기
import matplotlib.pyplot as plt

# matplotlib 한글 폰트 오류 문제 해결
from matplotlib import font_manager, rc
font_path = "./malgun.ttf"   #폰트파일의 위치
font_name = font_manager.FontProperties(fname=font_path).get_name()
rc('font', family=font_name)

# y축 x축 값
month=[1,2,3,4,5]
days=[1.10,1.20,1.30,2.10,2.20,2.30,3.10,3.20,3.30,4.10,4.20,4.30,5.10,5.20,5.30]
month_s=[jan,feb,mar,apr,may]
month_av=[javg,favg,mavg,aavg,maavg]
days_s=[jwa,jwb,jwc,fwa,fwb,fwc,mwa,mwb,mwc,awa,awb,awc,mwa,mwb,mwc]


# 스타일 서식 지정
plt.style.use('ggplot') 

# 그래프 객체 생성 (figure에 2개의 서브 플롯을 생성)
fig = plt.figure(figsize=(10, 10))   
ax1 = fig.add_subplot(3, 1, 1)
ax2 = fig.add_subplot(3, 1, 2)
ax3 = fig.add_subplot(3, 1, 3)

# axe 객체에 plot 함수로 그래프 출력
ax1.plot(days, days_s, marker='^', markerfacecolor='blue', 
        markersize=10, color='skyblue', linewidth=2, label='기간별(Daily)')
ax2.plot(month, month_s, marker='o', markerfacecolor='green', 
        markersize=10, color='olive', linewidth=2, label='월간(Monthly)')
ax3.plot(month, month_av, marker='s', markerfacecolor='red', 
        markersize=10, color='magenta', linewidth=2, label='하루 평균(Daily average')

# 최댓값 구하기
maxV_ms=month_s[0]
for i in range(1,len(month_s)):
    if maxV_ms < month_s[i]:
        maxV_ms=month_s[i]

maxV_mav=month_av[0]
for i in range(1,len(month_av)):
    if maxV_mav < month_av[i]:
        maxV_mav=month_av[i]

maxV_d=days_s[0]
for i in range(1,len(month_av)):
    if maxV_d < days_s[i]:
        maxV_d=days_s[i]



#y축 범위 지정 (최소값, 최대값)
ax1.set_ylim(0, maxV_d)
ax2.set_ylim(0,maxV_ms )
ax3.set_ylim(0,maxV_mav)

# 차트 제목 추가
ax1.set_title('기간별 소비량(By period Consumption)', size=20)
ax2.set_title('월간 소비량(Monthly Consumption)', size=20)
ax3.set_title('하루 평균 소비량(Daily average Consumption)', size=20)

# 축이름 추가
ax1.set_xlabel('기간(Period)', size=12)
ax1.set_ylabel('소비량(Consumption)', size = 12)
ax2.set_xlabel('기간(Period)', size=12)
ax2.set_ylabel('소비량(Consumption)', size = 12)
ax3.set_xlabel('기간(Period)', size=12)
ax3.set_ylabel('소비량(Consumption)', size = 12)


# 축 눈금 라벨 크기
ax1.tick_params(axis="x", labelsize=10)
ax1.tick_params(axis="y", labelsize=10)
ax2.tick_params(axis="x", labelsize=10)
ax2.tick_params(axis="y", labelsize=10)
ax3.tick_params(axis="x", labelsize=10)
ax3.tick_params(axis="y", labelsize=10)

plt.show()  # 변경사항 저장하고 그래프 출력


#==================================================
#미래 소비 예측
#==================================================

#이전 소비 정리해서 csv로 저장
months = len(value)

vvalue = []
i = 1
while (i <=  months):
    vvalue.append(i)  
    i = i+1

data=pd.DataFrame({'number':vvalue, 'money' : value})
data.to_csv('file.csv')
#단순선형회귀
df = pd.read_csv("file.csv")
df.head()
x = df["number"]
y = df["money"]
plt.plot(x, y, 'o')


line_fitter = LinearRegression()
line_fitter.fit(x.values.reshape(-1,1), y)

y_predicted =line_fitter.predict([[months+2]])
line_fitter.coef_
line_fitter.intercept_

plt.plot(x, y, 'o')
plt.plot(x,line_fitter.predict(x.values.reshape(-1,1)))
plt.show()

print('예측값:',y_predicted,'원')

menus=[(1,'1월'),(2,'2월'),(3,'3월'),(4,'4월'),(5,'5월'),(6,'종료')]
print("범위를 확인하고 싶은 달의 숫자를 입력해주세요.")



while True:
    for i,n in menus:
        print(i,n)
    c=int(input())

#1월
    
    if c==1:
        a=int(input('금액범위(최솟값)을 입력해주세요:'))
        b=int(input('금액범위(최댓값)을 입력해주세요:'))

        f=open('jan_money.txt','r')
        num_list=[]
        for line in f:
            for number in line.split():
                if int(number) > a and int(number) < b:
                    num_list.append(number)
                    
        print(num_list)
        print(len(num_list),'회')
    if c==2:
        a=int(input('금액범위(최솟값)을 입력해주세요:'))
        b=int(input('금액범위(최댓값)을 입력해주세요:'))

        f=open('feb_money.txt','r')
        num_list=[]
        for line in f:
            for number in line.split():
                if int(number) > a and int(number) < b:
                    num_list.append(number)
            
        print(num_list)
        print(len(num_list),'회')

#3월
    if c==3:
        a=int(input('금액범위(최솟값)을 입력해주세요:'))
        b=int(input('금액범위(최댓값)을 입력해주세요:'))

        f=open('mar_money.txt','r')
        num_list=[]
        for line in f:
            for number in line.split():
                if int(number) > a and int(number) < b:
                    num_list.append(number)
            
        print(num_list)
        print(len(num_list),'회')

#4월

    if c==4:
        a=int(input('금액범위(최솟값)을 입력해주세요:'))
        b=int(input('금액범위(최댓값)을 입력해주세요:'))

        f=open('apr_money.txt','r')
        num_list=[]
        for line in f:
            for number in line.split():
                if int(number) > a and int(number) < b:
                    num_list.append(number)
            
        print(num_list)
        print(len(num_list),'회')

#5월

    if c==5:
        a=int(input('금액범위(최솟값)을 입력해주세요:'))
        b=int(input('금액범위(최댓값)을 입력해주세요:'))

        f=open('may_money.txt','r')
        num_list=[]
        for line in f:
            for number in line.split():
                if int(number) > a and int(number) < b:
                    num_list.append(number)
            
        print(num_list)
        print(len(num_list),'회')

    if c==6:
        break


f.close()



